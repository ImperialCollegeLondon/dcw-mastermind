I wondered how hard it would be to reproduce the original game layout
direct in Postscript, at the maximum possible resolution that Postscript
can achieve.

After a series of debugging stages (debugN.ps, now moved out of this
directory), and a depressingly large amount of time spent bludgening
Postscript into shape, I got all the necessary functions ported into
Postscript and working.  debug8.ps shows the first time it actually worked,
displaying a made up puzzle, along with a debugging log.

Thinking about how to auto-generate many such Postscript files, in which
all the functions and definitions would be the same, but only the calls would
vary, it occurred to me that assembling the .ps files out of fragments via a
simple macro-processor that understands #include-type commands would greatly
simplify the process (as all the functions could be #include'd into place),
so took 20 minutes to write "inc" to do that (along with it's companion manual
page inc.1, view via "nroff -man inc.1|less").

Then I refactored debug8.ps into debug8.inc, with most of the separate
Postscript components moving into separate files in pslib/, and all the
Mastermind specific Postscript support functions into mmsupport.i.

Then I worked out a very clear way of specifying the guesses and the scores
to make further automation easy, via defining a load of constants specifying
the puzzle:

/maxguesses 4   def
/numholes   5   def

/g1 (RGBYP) def
/b1 2 def
/w1 2 def

/g2 (RRBBP) def
/b2 3 def
/w2 0 def

and then the board is generated by function calls passing a list of guesses
(or black and white scores) as the argument:

maxguesses shownumbers
[ g1 g2 (     ) ]    showguesses
[ b1 w1 b2 w2 ]    showscores

Finally, I wrote "makeps.pl" (a Perl script) to parse the final line of
"genpuzzle" output (from the reverse mastermind directory) and generate a
file just like debug8.inc (changing only the constants and the lists given
to the board drawing function calls), which we run through inc, in order
to generate displayable Postscript image of a particular puzzle.

More recently, I extended makeps.pl to ALSO generate a slightly different
.inc format file (and then convert it to Postscript and then EPS) that
contains only the secret code.


Using "makeps.pl", one might generate, store and view [if "gv" is installed]
a single Mastermind puzzle with 4 holes and 4 colours (RGBY) in good4x4/1.eps,
and it's secret code in good4x4/1s.eps, via:

../02.genpuzzle/gen4-4 | ./makeps.pl good4x4/1

Similarly, to generate, store and view a puzzle with 5 holes and 5 colours
(RGBYP), and it's corresponding secret code, use:

../02.genpuzzle/gen5-5 | ./makeps.pl good5x5/1

The good4x4 and good5x5 directories contain several reasonably challenging
puzzles.  In those directories, X.eps is the game, and Xs.eps the secret code.

One thing that is still quite hard is to estimate the hardness of a
particular Mastermind puzzle, i.e. the amount of time that a typical solver
might take to solve it.

			Duncan C. White, Jan-Feb 2020
